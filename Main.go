package main

import (
    "fmt"
    "net/http"
    "net/url"
    "os"
    "io/ioutil"
    "strings"
    "sync"
)

var (
    targetURL   string
    vulnPatterns = []string{"<script>alert(1);</script>", "SELECT * FROM users", "AND 1=1"}
)

func main() {
    if len(os.Args) != 2 {
        fmt.Println("Usage: go run main.go <target_url>")
        os.Exit(1)
    }

    targetURL = os.Args[1]
    fmt.Printf("Scanning %s for vulnerabilities...\n", targetURL)

    vulnerabilities := make(chan string)
    var wg sync.WaitGroup

    for _, pattern := range vulnPatterns {
        wg.Add(1)
        go func(p string) {
            defer wg.Done()
            if hasVulnerability(p) {
                vulnerabilities <- p
            }
        }(pattern)
    }

    go func() {
        wg.Wait()
        close(vulnerabilities)
    }()

    for vuln := range vulnerabilities {
        fmt.Printf("Vulnerability found: %s\n", vuln)
    }
}

func hasVulnerability(pattern string) bool {
    resp, err := http.Get(targetURL)
    if err != nil {
        fmt.Println("Error:", err)
        return false
    }
    defer resp.Body.Close()

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        fmt.Println("Error:", err)
        return false
    }

    if strings.Contains(string(body), pattern) {
        return true
    }

    return false
}
